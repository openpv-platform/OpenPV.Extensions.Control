syntax = "proto3";


package AhsokaCAN; // Used for CPP and Proto
option csharp_namespace = "Ahsoka.Services.Can";

message CanApplicationCalibration
{
    CanPortConfiguration CanPortConfiguration = 3;
}

// Can Configuration used at Runtime
message CanPortConfiguration
{
	CommunicationConfiguration CommunicationConfiguration = 1;
	MessageConfiguration MessageConfiguration = 2;
	DiagnosticEventConfiguration DiagnosticEventConfiguration = 3;
}

// Information about Communicating with the Main Processor (Ports, Addressees)
message CommunicationConfiguration
{
    string local_ip_address = 6; 
    string remote_ip_address = 7;
}

// Message / Signal Descriptions, Filters Etc.
message MessageConfiguration
{
    repeated NodeDefinition nodes = 1;
    repeated MessageDefinition messages = 2;
    repeated PortDefinition ports = 3;
}

//Description of Port
message PortDefinition
{
    uint32 port = 1;
    string can_interface_path = 2;
    AhsokaCAN.CanBaudRate baud_rate = 3;
    AhsokaCAN.CanInterface can_interface = 4;
    bool promiscuous_transmit = 5;
    bool promiscuous_receive = 6;
    bool user_defined = 7;
}

// Descriptions of Network Nodes
message NodeDefinition
{
    int32 id = 1; 
    string name = 2;
    string comment = 3;
    NodeType node_type = 4;
    TransportProtocol TransportProtocol = 8;  // May need to move up to Config / Port
    J1939NodeDefinition J1939Info = 9;
    IsoTPNodeDefinition IsoInfo = 10;
    repeated int32 ports = 11;
}

message IsoTPNodeDefinition
{
    int32 transmit_id = 5;
    int32 receive_id = 6;
}

message J1939NodeDefinition
{
    NodeAddressType address_type = 4;
    int32 address_value_one = 5;
    int32 address_value_two = 6;
    int32 address_value_three = 7;
    uint32 industry_group = 8;
    uint32 vehicle_system_instance = 9;
    uint32 vehicle_system = 10;
    uint32 function = 11;
    uint32 function_instance = 12;
    uint32 ECU_instance = 13;
    uint32 manufacturer_code = 14;
    uint64 name = 15;
    string addresses = 16;
    bool use_address_claim = 17;
}

// Message / Signal Descriptions, Filters Etc.
message MessageDefinition
{   
    uint32 id = 1;  
    string name = 2;
    MessageType message_type = 3; 
    uint32 dlc = 4;
    int32 rate = 5;
    string comment = 6;
    
    // Transport Configuration
    bool has_roll_count = 8;
    uint32 roll_count_bit = 9;
    uint32 roll_count_length = 10;
    CrcType crc_type = 11;
    uint32 crc_bit = 12;
    bool set_address_on_send = 13;
    int32 timeout_ms = 14;
    bool filter_receipts = 15;
    bool user_defined = 16;
    repeated int32 transmit_nodes = 18;
    repeated int32 receive_nodes  = 19;

    repeated MessageSignalDefinition signals = 20;
}

// Message / Signal Descriptions, Filters Etc.
message MessageSignalDefinition
{
	 uint32 id = 1; 
     string name = 2;
     uint32 start_bit = 3;
     uint32 bit_length = 4;
     ByteOrder byte_order = 5;
     ValueType  value_type = 6;
     double default_value = 7;
     double scale = 8;
     double offset = 9;
     double minimum = 10;
     double maximum = 11;
     string unit = 12;
     MuxRole mux_role = 13;
     uint32 mux_group = 14;
     string comment = 15;
     map<int32, string> values = 20;
     repeated int32 receiver_node_id = 21;
}

// Descriptions of Diagnostic Messages to Watch or Sent.
message DiagnosticEventConfiguration
{
    repeated DiagnosticEventDefinition diagnostic_events = 1;
}

message DiagnosticEventDefinition
{
    uint32 id = 1; 
    string name = 2;
    uint32 address = 3;
    bool discard = 4;
    oneof event_info 
    {
        J1939EventInfo j1939_dm = 5;
        OBDEventInfo obd_dtc = 6;
    }
    string comment = 7;
}

// Descriptions of Diagnostic Messages to Watch or Sent.
message J1939EventInfo
{
    uint32 spn = 1; 
    uint32 fmi = 2;
    J1930Lamp lamp = 3;
}

enum J1930Lamp
{ 
    yellow = 0;
    red = 1;
    status3 = 2;
    status4 = 3;
}

// Descriptions of Diagnostic Messages to Watch or Sent.
message OBDEventInfo
{
    DTCFault fault_type = 1;
    uint32 manufacturer_code = 2;
    uint32 vehicle_system = 3;
    uint32 code = 4;
}

enum DTCFault
{ 
    Powertrain = 0;
    Body = 1;
    Chassis = 2;
    Network = 3;
}

// Descriptions of Diagnostic Messages to Watch or Sent.
message ClientCanFilter
{
     uint32 can_port = 1;
     repeated uint32 can_id_list = 2;
}

// Custom Calibration Values for use in setting Behaviors in the CAN Processor.
message CustomPlatformCalibration
{
    bool promiscuous_transmit = 1;
    bool promiscuous_receive = 2;
}

enum NodeAddressType
{
    static = 0;
    system_address = 1;
    system_function_address = 2;
    system_instance_address = 3;
}

enum MuxRole
{
    NotMultiplexed = 0;
    Multiplexor = 1;
    Multiplexed = 2;
}

enum TransportProtocol
{
    RAW = 0;
    J1939 = 1;
    ISO_TP = 2;
}


enum MessageType
{
    RAW_STANDARD_FRAME = 0;
    RAW_EXTENDED_FRAME = 1;
    J1939_EXTENDED_FRAME = 3;
}


enum ValueType
{
    Signed = 0;
    Unsigned = 1;
    Float = 3;
    Double = 4;
    Enum = 5;
}

enum CrcType
{
    None = 0;
    //CRC6 = 1;
    CheckSum = 2;
    TSC1 = 3;
}

enum CanInterface
{
    NoUsed = 0;
    Coprocessor = 1;
    SocketCan = 2;
    ECOMWindows = 3;
}

enum CanBaudRate
{
    Baud_250kb = 0;
    Baud_500kb = 1;
    Baud_1mb = 2;
}

enum NodeType
{
    User_Defined = 0;
    Predefined = 1;
    Self = 2;
    Any = 3;
}

// Enumerations
enum ByteOrder 
{
    LittleEndian = 0;
    BigEndian = 1;
}
