//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ahsoka.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CANResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CANResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Ahsoka.Properties.CANResources", typeof(CANResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #!/bin/sh
        ///echo &quot;CAN Start Time&quot; $(date +%T.%3N)
        ///
        ///#Start Application
        ///echo start &gt; /sys/class/remoteproc/remoteproc0/state
        ///
        ///until [ -e ${InterfacePath} ]; do
        ///    echo &quot;Waiting for CAN App to Start...&quot;
        ///    sleep 1
        ///done
        ///
        ///#Start Application
        ///slattach -p slip -L -m ${InterfacePath} &amp;
        ///ifconfig sl0 ${IpAddressLocal} pointtopoint ${IpAddressRemote} up
        ///.
        /// </summary>
        internal static string Ahsoka_Can_Start {
            get {
                return ResourceManager.GetString("Ahsoka_Can_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] CanConfiguration {
            get {
                object obj = ResourceManager.GetObject("CanConfiguration", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #pragma once
        ///#include &lt;string&gt;
        ///#include &lt;functional&gt;
        ///#include &lt;memory&gt;
        ///#include &lt;math.h&gt;
        ///#include &lt;cfloat&gt;
        ///#include &quot;AhsokaServices.h&quot;
        ///
        ///using namespace std;
        ///using namespace AhsokaCAN;
        ///
        ///namespace AhsokaCAN
        ///{
        ///    class CanPropertyInfo
        ///    {
        ///        public: 
        ///
        ///            CanPropertyInfo( ){}
        ///            CanPropertyInfo(const CanPropertyInfo&amp; copy )
        ///            {
        ///                scale = copy.scale;
        ///                offset = copy.offset;
        ///                startBit = copy.startBit;
        ///                bitLength = copy.b [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CanPropertyInfo {
            get {
                return ResourceManager.GetString("CanPropertyInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #pragma once
        ///
        ///#include &lt;string&gt;
        ///#include &lt;functional&gt;
        ///#include &quot;AhsokaServices.h&quot;
        ///
        ///namespace AhsokaCAN
        ///{
        ///    class CANProtocolHelper
        ///    {
        ///        public:
        ///            CANProtocolHelper(CanMessageData* data)
        ///            {
        ///                messageData = data;
        ///            }
        ///
        ///        protected:
        ///            CanMessageData* messageData;
        ///    };
        ///}.
        /// </summary>
        internal static string CANProtocolHelper {
            get {
                return ResourceManager.GetString("CANProtocolHelper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] CanService {
            get {
                object obj = ResourceManager.GetObject("CanService", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] CanServiceClientExtensionsCXX {
            get {
                object obj = ResourceManager.GetObject("CanServiceClientExtensionsCXX", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] CanServiceClientExtensionsH {
            get {
                object obj = ResourceManager.GetObject("CanServiceClientExtensionsH", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] CanServiceClientIncludes {
            get {
                object obj = ResourceManager.GetObject("CanServiceClientIncludes", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #pragma once
        ///#include &lt;string&gt;
        ///#include &lt;functional&gt;
        ///#include &lt;memory&gt;
        ///#include &quot;AhsokaServices.h&quot;
        ///#include &quot;CanPropertyInfo.h&quot;
        ///#include &quot;IHasCanData.h&quot;
        ///
        ///using namespace std;
        ///using namespace AhsokaCAN;
        ///
        ///namespace AhsokaCAN
        ///{
        ///    class CanViewModelBase : public IHasCanData
        ///    {
        ///        public: 
        ///
        ///            uint GetId() { return message.id(); } 
        ///
        ///            CanViewModelBase(uint canID, int dlc)
        ///            {
        ///                message.set_dlc((uint)dlc);
        ///                message.set_id(canID);
        ///                 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CanViewModelBase {
            get {
                return ResourceManager.GetString("CanViewModelBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///
        ///    class CanModelMetadata
        ///    {
        ///        public:
        ///
        ///            std::map&lt;uint, std::map&lt;int, CanPropertyInfo&gt;&gt;&amp; GetMetadata();
        ///
        ///            std::map&lt;int, CanPropertyInfo&gt;&amp; GetMetadata(uint canID);
        ///
        ///            void AddMetadata(uint canID, std::map&lt;int, CanPropertyInfo&gt; properties);
        ///
        ///            CanPropertyInfo&amp; GetPropertyInfo(uint canID, int signalID);
        ///
        ///            unique_ptr&lt;CanViewModelBase&gt; CreateObject(CanMessageData data);
        ///
        ///            static CanModelMetadata* CanMetadata();
        ///
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CPPMetadataDictionary {
            get {
                return ResourceManager.GetString("CPPMetadataDictionary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///    std::map&lt;uint, std::map&lt;int, CanPropertyInfo&gt;&gt;&amp; CanModelMetadata::GetMetadata() 
        ///    { 
        ///        return metadata; 
        ///    }
        ///
        ///    std::map&lt;int, CanPropertyInfo&gt;&amp; CanModelMetadata::GetMetadata(uint canID) 
        ///    { 
        ///        return metadata[canID]; 
        ///    }
        ///
        ///    void CanModelMetadata::AddMetadata(uint canID, std::map&lt;int, CanPropertyInfo&gt; properties)
        ///    {
        ///        metadata[canID] = properties;
        ///    }
        ///
        ///    CanPropertyInfo&amp; CanModelMetadata::GetPropertyInfo(uint canID, int signalID)
        ///    {
        ///        re [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CPPMetadataDictionaryIMPL {
            get {
                return ResourceManager.GetString("CPPMetadataDictionaryIMPL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///public class CanModelMetadata : ICanMetadata
        ///{
        ///	Dictionary&lt;uint, Dictionary&lt;string, CanPropertyInfo&gt;&gt; metadata = new();
        ///
        ///    static CanModelMetadata eventMetadata = null;
        ///
        ///    public Dictionary&lt;uint, Dictionary&lt;string, CanPropertyInfo&gt;&gt; GetMetadata() { return metadata; }
        ///
        ///    public Dictionary&lt;string, CanPropertyInfo&gt; GetMetadata(uint canID) { return metadata[canID]; }
        ///
        ///	public void AddMetadata(uint canID, Dictionary&lt;string, CanPropertyInfo&gt; properties)
        ///	{
        ///		metadata.Add(canID, properties);
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CSharpMetadataDictionary {
            get {
                return ResourceManager.GetString("CSharpMetadataDictionary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] IHasCanData {
            get {
                object obj = ResourceManager.GetObject("IHasCanData", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #pragma once
        ///
        ///#include &lt;string&gt;
        ///#include &lt;functional&gt;
        ///#include &quot;AhsokaServices.h&quot;
        ///#include &quot;CANProtocolHelper.h&quot;
        ///#include &quot;CanPropertyInfo.h&quot;
        ///
        ///namespace AhsokaCAN
        ///{
        ///    class J1939Id
        ///    {
        ///        public:
        ///            J1939Id() {}
        ///
        ///            J1939Id(uint id)
        ///            {
        ///                ExtractValues(id);
        ///            }
        ///
        ///            uint GetSourceAddress() { return sourceInfo.GetValue&lt;uint&gt;(id, false); }
        ///            void SetSourceAddress(uint value) { sourceInfo.SetValue&lt;uint&gt;(id, value, false); }
        ///
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string J1939Helper {
            get {
                return ResourceManager.GetString("J1939Helper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] OpenViewLinux_TargetSupport_firmware_CM4 {
            get {
                object obj = ResourceManager.GetObject("OpenViewLinux_TargetSupport_firmware_CM4", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	&quot;name&quot;: &quot;StandardCanDefinitions&quot;,
        ///	&quot;canPort&quot;: &quot;can1&quot;,
        ///	&quot;baudRate&quot;: &quot;Baud250kb&quot;,
        ///	&quot;canInterface&quot;: &quot;Coprocessor&quot;,
        ///	&quot;localIpAddress&quot;: &quot;0&quot;,
        ///	&quot;remoteIpAddress&quot;: &quot;0&quot;,
        ///	&quot;nodes&quot;: [
        ///		{
        ///			&quot;idValid&quot;: 255,
        ///			&quot;id&quot;: 255,
        ///			&quot;name&quot;: &quot;ANY&quot;,
        ///			&quot;comment&quot;: &quot;&quot;,
        ///			&quot;nodeType&quot;: &quot;Any&quot;,
        ///			&quot;transportProtocol&quot;: &quot;J1939&quot;,
        ///			&quot;j1939Info&quot;: {
        ///				&quot;addressOneValid&quot;: 255,
        ///				&quot;addressTwoValid&quot;: 0,
        ///				&quot;addressThreeValid&quot;: 0,
        ///				&quot;addressType&quot;: &quot;Static&quot;,
        ///				&quot;addressValueOne&quot;: 255,
        ///				&quot;addressValueTwo&quot;: 0,
        ///			 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StandardCanDefinitions {
            get {
                return ResourceManager.GetString("StandardCanDefinitions", resourceCulture);
            }
        }
    }
}
