syntax = "proto3";

package AhsokaIO; // Used for CPP and Proto
option csharp_namespace = "Ahsoka.Services.IO";

message IOApplicationConfiguration
{
    // Forcing name to be IOConfiguration instead of IoConfiguration
    IOConfiguration IOConfiguration = 1;
    
    bool generator_enabled = 10;
    string generator_namespace = 11;
    string generator_output_file = 12;
    string generator_base_class = 13;

    string version = 20;
}

message IOConfiguration
{
    repeated AnalogInputConfiguration analog_inputs = 1;
    repeated AnalogOutputConfiguration analog_outputs = 2;
    repeated DigitalInputConfiguration digital_inputs= 3;
    repeated DigitalOutputConfiguration digital_outputs = 4;
    repeated FrequencyInputConfiguration frequency_inputs = 5;
    repeated FrequencyOutputConfiguration frequency_outputs = 6;
    repeated CurveDefinition curves = 7;
}

message AnalogInputConfiguration
{
    uint32 channel_num = 1;
    bytes curve_id = 2;
    uint32 digital_threshold = 3;
    uint32 digital_hysteresis_percent = 4;
}

message AnalogOutputConfiguration
{
    uint32 channel_num = 1;
    bytes curve_id = 2;
    PorBehavior por_behavior = 3;
    LocBehavior loc_behavior = 4;
}

message DigitalInputConfiguration
{
    uint32 channel_num = 1;
    DigitalInputType input_type = 2;
    uint32 threshold = 3;  // percentage of full scale to count high/low
}

message DigitalOutputConfiguration
{
    uint32 channel_num = 1;
    PorBehavior por_behavior = 2;
    LocBehavior loc_behavior = 3;
}

message FrequencyInputConfiguration
{
    uint32 channel_num = 1;
}

message FrequencyOutputConfiguration
{
    uint32 channel_num = 1;
    uint32 duty_cycle = 2;
    uint32 frequency = 3;
    PORBehavior por_behavior = 4;
    LOCBehavior loc_behavior = 5;
}

message Coordinate 
{
    uint32 x = 1;
    uint32 y = 2;
}

message CurveDefinition
{
    string name = 1;
    bytes id = 2;
    AnalogInputType input_type = 3;
    repeated Coordinate coordinates = 4;
}

enum AnalogInputType
{
    VOLTAGE_INPUT = 0;
    RESISTIVE_INPUT = 1;
    CURRENT_INPUT = 2;
    DIGITAL_INPUT = 3; // will indicate both a pullup and pulldown active, half range.
}

enum DigitalInputType
{
    PULLED_HIGH = 0;
    PULLED_LOW = 1;
    FLOATING = 2;
    DIVIDED = 3;
}

enum PorBehavior
{
    OFF = 0;
    ON_POSITIVE = 1;
    ON_NEGATIVE = 2;
    LAST_COMMAND = 3; 
}

enum LocBehavior
{
    OFF = 0;
    ON_POSITIVE = 1;
    ON_NEGATIVE = 2;
    LAST_COMMAND = 3; 
}